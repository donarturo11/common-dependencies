name: Build common deps

on:
  workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
       include:
        - name: "windows-msvc"
          os: windows-latest
          shell: cmd
          toolchain:
            cc: 'cl'
            cxx: 'cl'
          sdks-prefix: 'C:/SDKs/windows-msvc'
        - name: "windows-gcc"
          os: windows-latest
          shell: bash
          toolchain:
            cc: 'gcc.exe'
            cxx: 'gcc.exe'
          sdks-prefix: 'C:/SDKs/windows-mingw'
        - name: "linux-gcc"
          os: ubuntu-latest
          shell: bash
          toolchain:
            cc: 'gcc'
            cxx: 'gcc'
          sdks-prefix: '/opt/SDKs/linux-gcc'
        - name: "macos-clang"
          os: macos-latest
          shell: bash
          toolchain:
            cc: 'clang'
            cxx: 'clang++'
          sdks-prefix: '/opt/SDKs/macos-clang'
    
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 
    
    - name: Test python
      run: python -V
    
    - name: Begin env
      shell: python
      run: |
        import os
        print(os.environ)
        
    - name: Set up Visual Studio shell
      if: ${{ runner.os == 'Windows' }}
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64
    - name: setup artifacts dir
      shell: bash
      run: |
        cd "$RUNNER_WORKSPACE"
        mkdir artifacts
        cd artifacts
        echo "ARTIFACTS_DIR=$(pwd)" >> GITHUB_ENV
        pwd

    - name: Setup environment
      shell: bash
      run: |
        [[ $RUNNER_OS == 'Linux' ]] && sudo apt-get update && sudo apt-get install ninja-build -y
        if [[ $RUNNER_OS == 'Windows' ]]; then
          echo "C:\\mingw64\\bin" >> $GITHUB_PATH
          echo "C:\\msys64\\bin" >> $GITHUB_PATH
          echo "C:\\msys64\\usr\\bin" >> $GITHUB_PATH
        fi
        echo 'CMAKE_GENERATOR=Ninja' >> $GITHUB_ENV
        echo "CMAKE_C_COMPILER=${{ matrix.toolchain.cc }}" >> $GITHUB_ENV
        echo "CC=${{ matrix.toolchain.cc }}" >> $GITHUB_ENV
        echo "CMAKE_CXX_COMPILER=${{ matrix.toolchain.cxx }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.toolchain.cxx }}" >> $GITHUB_ENV
        echo 'SDKS_PREFIX=${{ matrix.sdks-prefix }}' >> $GITHUB_ENV
        if [[ $RUNNER_OS == 'macOS' ]]; then
         echo 'CMAKE_OSX_ARCHITECTURES=x86_64;arm64' >> $GITHUB_ENV
         echo 'CMAKE_OSX_DEPLOYMENT_TARGET=11' >> $GITHUB_ENV
        fi
        if [[ $RUNNER_OS != 'Windows' ]]; then
          sudo mkdir -p ${{ matrix.sdks-prefix }}
          sudo chmod 777 ${{ matrix.sdks-prefix }}
        fi
    
    - name: Test environment
      shell: python
      run: |
        _github="""
            .github ${{ toJSON(github) }}
            """
        _env="""
            env ${{ toJSON(env) }}
            """
        _matrix="""
            matrix ${{ toJSON(matrix) }}
            """
        print(_github)
        print(_env)
        print(_matrix)

    - name: Print structure
      if: ${{ runner.os == 'Windows' }}
      shell: bash
      run: |
        find /c/mingw64 >> ${ARTIFACTS_DIR}/mingw-structure.txt
        find /c/msys64  >> ${ARTIFACTS_DIR}/msys-structure.txt
        find /d/ >> ${ARTIFACTS_DIR}/d-windows-structure.txt

    - name: Test bash
      shell: bash
      run: |
        packages="
          7z
          bsdtar
          cmake
          ninja
          make
          gcc
          cl
          pacman
          rev
          "
        for _pkg in $packages; do
          which $_pkg  || echo $_pkg failed
        done

    - name: Test package builder
      uses: ./.github/actions/build-package
      env:
          CC: ${{ matrix.toolchain.cc }}
          CXX: ${{ matrix.toolchain.cxx }}
      with:
        tag: ${{ matrix.name }}
        packages: >-
            fftw
            portaudio
            stk

    - uses: actions/upload-artifact@v4
      with:
        name: interactiveWorkflowFiles
        path: ${{ github.workspace }}${{ runner.os == 'Windows' & '\' : '/' }}artifacts
          
          
      
          



